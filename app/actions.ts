"use server";

import { CostItem } from "@prisma/client";
import { randomUUID } from "node:crypto";
import { OpenAI } from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });

export async function analyzePdf(file: File) {
  if (!file) throw new Error("Arquivo n√£o encontrado");

  const buffer = Buffer.from(await file.arrayBuffer());
  const blob = new Blob([buffer], { type: "application/pdf" });

  const uploaded = await openai.files.create({
    file: new File([blob], file.name, { type: "application/pdf" }),
    purpose: "assistants",
  });

  const assistant = await openai.beta.assistants.create({
    name: "Analista de Editais",
    instructions: `
  Voc√™ √© um analista s√™nior de licita√ß√µes p√∫blicas, especializado na interpreta√ß√£o estrat√©gica de editais √† luz da Lei n¬∫ 14.133/2021. Seu √∫nico foco √© apoiar empresas privadas na an√°lise objetiva e acion√°vel de editais p√∫blicos.
  
  üìå OBJETIVO
  Gerar relat√≥rios claros, t√©cnicos e estruturados em HTML, prontos para orientar a tomada de decis√£o da empresa ‚Äî com destaque para riscos, prazos, exig√™ncias e oportunidades.
  
  üìÑ FORMATO DA RESPOSTA
  - Exclusivamente em HTML v√°lido e estruturado;
  - Pode utilizar Tailwind CSS para estiliza√ß√£o, **mas sem alterar o background padr√£o**;
  - Sem coment√°rios, explica√ß√µes ou sa√≠das fora da marca√ß√£o HTML.
  
  üìã INCLUIR NA INTRODU√á√ÉO:
  - Objeto da licita√ß√£o;
  - √ìrg√£o respons√°vel;
  - Local de execu√ß√£o (Estado ou Munic√≠pio);
  - Modalidade (presencial ou online);
  - Portal da disputa;
  - Valor estimado;
  - Prazos: vig√™ncia da contrata√ß√£o, vig√™ncia da execu√ß√£o e prazo de execu√ß√£o;
  - Crit√©rio de julgamento (ex: menor pre√ßo por item);
  - Exig√™ncia de atestado de capacidade t√©cnica;
  - Exig√™ncia de certid√µes e/ou credenciamento.
  
  üßæ DETALHAR OS BLOCOS ABAIXO (nesta ordem):
  1. ‚úÖ Checklist de Documentos Obrigat√≥rios
     - Habilita√ß√£o Jur√≠dica
     - Regularidade Fiscal
     - Qualifica√ß√£o T√©cnica
     - Qualifica√ß√£o Econ√¥mico-Financeira
     - Declara√ß√µes obrigat√≥rias
  
  2. ‚è∞ Prazos e Datas Relevantes
     - Data limite para envio de propostas
     - Data da sess√£o p√∫blica
     - Prazos para impugna√ß√£o e esclarecimentos
  
  3. ‚ö†Ô∏è Cl√°usulas Cr√≠ticas e Riscos √† Participa√ß√£o
     - Exig√™ncias incomuns ou desproporcionais
     - Condi√ß√µes que possam limitar a competitividade
     - Pontos com potencial de inabilita√ß√£o
  
  4. ‚ùó Recomenda√ß√µes Estrat√©gicas
     - Sugest√µes pr√°ticas para aumentar a chance de sucesso
     - Fundamenta√ß√£o legal (Lei n¬∫ 14.133/2021) para impugna√ß√µes, se cab√≠vel
  
  5. üîç Observa√ß√µes Finais
     - Ambiguidades, lacunas ou riscos contratuais
     - Destaques sobre san√ß√µes, garantias, crit√©rios ou omiss√µes relevantes
  
  ‚öñÔ∏è FUNDAMENTO LEGAL
  Voc√™ possui acesso √† √≠ntegra da Lei n¬∫ 14.133/2021 e deve us√°-la sempre que necess√°rio:
  - Para interpretar cl√°usulas;
  - Identificar abusos ou ilegalidades;
  - Apontar omiss√µes e sugerir impugna√ß√µes fundamentadas (ex: ‚ÄúArt. 65, ¬ß1¬∫‚Äù).
  
  üîê INSTRU√á√ïES FINAIS
  - Use linguagem t√©cnica, clara e objetiva;
  - Nunca cole trechos brutos do edital;
  - Sempre cite o artigo correspondente da Lei n¬∫ 14.133/2021 ao apontar algo juridicamente relevante;
  - A resposta final deve ser HTML puro e funcional, com Tailwind CSS se necess√°rio ‚Äî sem conte√∫do fora da tag <html>.
  `,
    tools: [
      {
        type: "file_search",
      },
    ],
    model: "gpt-4o-mini",
    response_format: {
      type: "text",
    },
  });

  const thread = await openai.beta.threads.create();

  await openai.beta.threads.messages.create(thread.id, {
    role: "user",
    content:
      "Analise o PDF de licita√ß√£o e forne√ßa APENAS o conte√∫do HTML, com os dados reais preenchidos. N√£o use placeholders.",
    attachments: [
      {
        file_id: uploaded.id,
        tools: [{ type: "file_search" }],
      },
    ],
  });

  const run = await openai.beta.threads.runs.create(thread.id, {
    assistant_id: assistant.id,
  });

  let status = run.status;

  while (["queued", "in_progress", "cancelling"].includes(status)) {
    console.log("Status do run:", status);
    await new Promise((r) => setTimeout(r, 2000));
    const updated = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    status = updated.status;
  }

  // Fora do loop:
  if (status === "completed") {
    const messages = await openai.beta.threads.messages.list(thread.id);
    const text = messages.data.find((m) => m.role === "assistant")?.content[0];

    if (!text) {
      throw new Error("Resposta da IA vazia");
    }

    if (text?.type === "text") {
      const cleanedText = text.text.value.replace(/```html|```/g, "").trim();
      return { message: cleanedText };
    }

    throw new Error("Resposta inesperada da IA");
  }

  throw new Error(`Execu√ß√£o falhou com status: ${status}`);
}

export async function getCosts(file: File): Promise<{ costs: CostItem[] }> {
  if (!file) throw new Error("Arquivo n√£o encontrado");

  const uploaded = await openai.files.create({
    file,
    purpose: "assistants",
  });

  const assistant = await openai.beta.assistants.create({
    name: "Extrator de Custos de Editais",
    instructions: `
      Voc√™ ir√° analisar um edital de licita√ß√£o em formato PDF.

      Seu objetivo √© identificar **todos os itens de custo mencionados** no documento ‚Äî valores monet√°rios relacionados a materiais, servi√ßos, m√£o de obra, equipamentos ou qualquer outro elemento or√ßament√°rio.

      Para cada item identificado, voc√™ deve gerar um objeto no seguinte formato:

      {
        "description": "Descri√ß√£o resumida do item de custo",
        "category": "m√£o_de_obra" | "materiais" | "equipamentos" | "servi√ßos" | "outros",
        "value": 1234.56,
        "type": "automatic"
      }

      Classifique o item com base nas seguintes regras:

      - "m√£o_de_obra": qualquer tipo de trabalho humano (instala√ß√£o, fiscaliza√ß√£o, opera√ß√£o, etc.)
      - "materiais": insumos e mat√©rias-primas (cimento, tinta, cabos, papel, etc.)
      - "equipamentos": ferramentas, m√°quinas, ve√≠culos ou dispositivos utilizados na execu√ß√£o
      - "servi√ßos": atividades de terceiros (aluguel, transporte, limpeza, seguran√ßa, etc.)
      - "outros": se n√£o se encaixar em nenhuma das categorias acima

      Se o edital indicar a necessidade de um espa√ßo f√≠sico ou estrutura, estime um valor com base em um pre√ßo m√©dio por metro quadrado compat√≠vel com o tipo de ambiente citado (ex: R$ 50/m¬≤ para espa√ßos simples, R$ 100/m¬≤ para ambientes climatizados ou especializados). Adapte o valor conforme o contexto se necess√°rio.

      Retorne somente um array JSON puro, com todos os itens encontrados. N√£o adicione explica√ß√µes, coment√°rios ou qualquer outro conte√∫do al√©m do JSON.
    `,
    tools: [{ type: "file_search" }],
    model: "gpt-4o-mini",
  });

  const thread = await openai.beta.threads.create();

  await openai.beta.threads.messages.create(thread.id, {
    role: "user",
    content:
      "Analise o edital e extraia todos os custos mencionados, classificando-os nas categorias especificadas, e retorne no formato JSON conforme a interface CostItem (sem o campo id).",
    attachments: [
      {
        file_id: uploaded.id,
        tools: [{ type: "file_search" }],
      },
    ],
  });

  const run = await openai.beta.threads.runs.create(thread.id, {
    assistant_id: assistant.id,
  });

  let status = run.status;
  while (["queued", "in_progress", "cancelling"].includes(status)) {
    await new Promise((r) => setTimeout(r, 2000));
    const updated = await openai.beta.threads.runs.retrieve(thread.id, run.id);
    status = updated.status;
    if (status === "completed") {
      const messages = await openai.beta.threads.messages.list(thread.id);
      const text = messages.data.find((m) => m.role === "assistant")
        ?.content[0];

      messages.data.forEach((m) => {
        console.log(m.role, m.content);
      });

      if (text?.type === "text") {
        try {
          const jsonText = text.text.value.replace(/```json|```/g, "").trim();

          const parsed = JSON.parse(jsonText);

          const costs: CostItem[] = parsed.map(
            (item: Omit<CostItem, "id">) => ({
              ...item,
              id: randomUUID(),
            })
          );

          return { costs };
        } catch (err) {
          throw new Error(
            "Erro ao interpretar o JSON retornado pelo assistente"
          );
        }
      }

      throw new Error("Resposta inesperada da IA");
    }
  }

  throw new Error("Execu√ß√£o n√£o conclu√≠da");
}

export async function analizeEdital() {}
