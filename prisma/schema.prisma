generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  googleId  String?
  picture   String?

  costItems          CostItem[]
  createdTenders     Tender[]             @relation("CreatedTenders")
  followedTenders    Tender[]             @relation("FollowedTenders")
  joinedTenders      Tender[]             @relation("JoinedTenders")
  Chat               Chat[]
  Document           Document[]
  Suggestion         Suggestion[]
  Assistant          Assistant[]
  OnboardingResponse OnboardingResponse[]
  UserPreferences    UserPreferences?
  Tender             Tender[]
  emailVerified      Boolean
  image              String?
  sessions           Session[]
  accounts           Account[]
  SentBoletim        SentBoletim[]
  UserKeyword        UserKeyword[]

  @@map("user")
}

model Tender {
  id                    String    @id @default(cuid())
  purchaseNumber        String
  process               String
  purchaseYear          Int
  purchaseSequence      Int
  modalityId            Int
  modalityName          String
  instrumentTypeName    String
  purchaseStatusId      Int
  purchaseStatusName    String
  purchaseObject        String
  estimatedTotalValue   Int
  approvedTotalValue    Int?
  inclusionDate         DateTime
  publicationDatePncp   DateTime
  updateDate            DateTime
  proposalOpeningDate   DateTime?
  proposalClosingDate   DateTime?
  pncpControlNumber     String    @unique
  globalUpdateDate      DateTime
  disputeModeId         Int
  disputeModeName       String
  srp                   Boolean
  userName              String?
  sourceSystemLink      String?
  electronicProcessLink String?

  orgaoEntidadeId String
  orgaoEntidade   OrgaoEntidade @relation(fields: [orgaoEntidadeId], references: [id])

  unidadeOrgaoId String
  unidadeOrgao   UnidadeOrgao @relation(fields: [unidadeOrgaoId], references: [id])

  amparoLegalId String
  amparoLegal   AmparoLegal @relation(fields: [amparoLegalId], references: [id])

  costItems CostItem[]

  createdBy User?   @relation("CreatedTenders", fields: [creatorId], references: [id])
  creatorId String?

  followedBy User[] @relation("FollowedTenders")
  joinedBy   User[] @relation("JoinedTenders")

  search_vector Unsupported("tsvector")?

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?
  ProposalTemplate ProposalTemplate?
}

model OrgaoEntidade {
  id          String @id @default(cuid())
  cnpj        String @unique
  companyName String
  powerId     String
  sphereId    String

  tenders Tender[]
}

model UnidadeOrgao {
  id        String @id @default(cuid())
  unitCode  String @unique
  unitName  String
  cityName  String
  stateAbbr String
  stateName String
  ibgeCode  String

  tenders Tender[]
}

model AmparoLegal {
  id          String @id @default(cuid())
  code        Int    @unique
  name        String
  description String

  tenders Tender[]
}

model CostItem {
  id          String   @id @default(uuid())
  description String
  category    Category
  value       Float
  type        CostType
  tenderId    String
  tender      Tender   @relation(fields: [tenderId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assistant {
  id         String   @id @default(uuid())
  externalId String   @unique
  name       String   @default("default")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model OnboardingResponse {
  id        String   @id @default(uuid())
  question  String
  answer    String
  inputName String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CostType {
  FIXED
  VARIABLE
}

enum Category {
  MATERIAL
  SERVICO
  TRANSPORTE
  TRIBUTOS
  OUTROS
}

enum Visibility {
  public
  private
}

enum DocumentKind {
  text
  code
  image
  sheet
}

model Chat {
  id         String     @id @default(uuid())
  createdAt  DateTime
  title      String
  threadId   String?
  userId     String
  visibility Visibility @default(private)

  user               User                @relation(fields: [userId], references: [id])
  messages           Message[]
  messagesDeprecated MessageDeprecated[]
  votes              Vote[]
  votesDeprecated    VoteDeprecated[]
  streams            Stream[]
}

model MessageDeprecated {
  id        String   @id @default(uuid())
  chatId    String
  role      String
  content   Json
  createdAt DateTime

  chat  Chat             @relation(fields: [chatId], references: [id])
  votes VoteDeprecated[]
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  role        String
  parts       Json
  attachments Json
  createdAt   DateTime

  chat  Chat   @relation(fields: [chatId], references: [id])
  votes Vote[]
}

model VoteDeprecated {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat              @relation(fields: [chatId], references: [id])
  message MessageDeprecated @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

model Document {
  id        String       @default(uuid())
  createdAt DateTime
  title     String
  content   String?
  kind      DocumentKind @default(text)
  userId    String

  user        User         @relation(fields: [userId], references: [id])
  suggestions Suggestion[]

  @@id([id, createdAt])
}

model Suggestion {
  id                String   @id @default(uuid())
  documentId        String
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String
  createdAt         DateTime

  document Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])
  user     User     @relation(fields: [userId], references: [id])
}

model Stream {
  id        String   @id @default(uuid())
  chatId    String
  createdAt DateTime

  chat Chat @relation(fields: [chatId], references: [id])
}

model PncpSyncProgress {
  id                          Int      @id @default(autoincrement())
  codigoModalidadeContratacao Int
  dataInicial                 DateTime
  dataFinal                   DateTime
  ultimaPaginaSincronizada    Int
  updatedAt                   DateTime @updatedAt
  endpoint                    String

  @@unique([codigoModalidadeContratacao, dataInicial, dataFinal, endpoint])
}

model UserPreferences {
  id                    String  @id @default(uuid())
  emailNotification     Boolean @default(true)
  navigatorNotification Boolean @default(true)
  User                  User    @relation(fields: [userId], references: [id])
  userId                String  @unique
}

model ProposalTemplate {
  id        String   @id @default(cuid())
  title     String // Ex: "Pregão Eletrônico nº 22/2025"
  edital    Tender   @relation(fields: [tenderId], references: [id])
  campos    Json // Campos esperados para preencher (nome, tipo, label, etc)
  template  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proposals Proposal[]
  tenderId  String     @unique
}

model Proposal {
  id         String           @id @default(cuid())
  templateId String
  template   ProposalTemplate @relation(fields: [templateId], references: [id])
  userId     String // ou email do usuário logado
  dados      Json // Respostas do usuário
  pdfUrl     String? // (opcional) link para PDF gerado, caso salve no S3
  createdAt  DateTime         @default(now())
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model SentBoletim {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  color      String
  keywords   String[]
  rangeStart DateTime
  rangeEnd   DateTime
  createdAt  DateTime @default(now())

  @@unique([userId, rangeStart])
}

model UserKeyword {
  id        String   @id @default(uuid())
  name      String?
  keyword   String[]
  default   Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([keyword])
}
