generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String // Hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  costItems          CostItem[]
  createdTenders     Tender[]             @relation("CreatedTenders")
  followedTenders    Tender[]             @relation("FollowedTenders")
  Chat               Chat[]
  Document           Document[]
  Suggestion         Suggestion[]
  Assistant          Assistant[]
  OnboardingResponse OnboardingResponse[]
}

model Tender {
  id                    String   @id @default(cuid())
  purchaseNumber        String
  process               String
  purchaseYear          Int
  purchaseSequence      Int
  modalityId            Int
  modalityName          String
  instrumentTypeName    String
  purchaseStatusId      Int
  purchaseStatusName    String
  purchaseObject        String
  estimatedTotalValue   Int
  approvedTotalValue    Int?
  inclusionDate         DateTime
  publicationDatePncp   DateTime
  updateDate            DateTime
  proposalOpeningDate   DateTime?
  proposalClosingDate   DateTime?
  pncpControlNumber     String   @unique
  globalUpdateDate      DateTime
  disputeModeId         Int
  disputeModeName       String
  srp                   Boolean
  userName              String?
  sourceSystemLink      String?
  electronicProcessLink String?

  orgaoEntidadeId String
  orgaoEntidade   OrgaoEntidade @relation(fields: [orgaoEntidadeId], references: [id])

  unidadeOrgaoId String
  unidadeOrgao   UnidadeOrgao @relation(fields: [unidadeOrgaoId], references: [id])

  amparoLegalId String
  amparoLegal   AmparoLegal @relation(fields: [amparoLegalId], references: [id])

  costItems CostItem[]

  createdBy User?   @relation("CreatedTenders", fields: [creatorId], references: [id])
  creatorId String?

  followedBy User[] @relation("FollowedTenders")

  search_vector Unsupported("tsvector")?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgaoEntidade {
  id          String @id @default(cuid())
  cnpj        String @unique
  companyName String
  powerId     String
  sphereId    String

  tenders Tender[]
}

model UnidadeOrgao {
  id        String @id @default(cuid())
  unitCode  String @unique
  unitName  String
  cityName  String
  stateAbbr String
  stateName String
  ibgeCode  String

  tenders Tender[]
}

model AmparoLegal {
  id          String @id @default(cuid())
  code        Int    @unique
  name        String
  description String

  tenders Tender[]
}

model CostItem {
  id          String   @id @default(uuid())
  description String
  category    Category
  value       Float
  type        CostType
  tenderId    String
  tender      Tender   @relation(fields: [tenderId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assistant {
  id         String   @id @default(uuid())
  externalId String   @unique
  name       String   @default("default")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model OnboardingResponse {
  id        String   @id @default(uuid())
  question  String
  answer    String
  inputName String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CostType {
  FIXED
  VARIABLE
}

enum Category {
  MATERIAL
  SERVICO
  TRANSPORTE
  TRIBUTOS
  OUTROS
}

enum Visibility {
  public
  private
}

enum DocumentKind {
  text
  code
  image
  sheet
}

model Chat {
  id         String     @id @default(uuid())
  createdAt  DateTime
  title      String
  userId     String
  visibility Visibility @default(private)

  user               User                @relation(fields: [userId], references: [id])
  messages           Message[]
  messagesDeprecated MessageDeprecated[]
  votes              Vote[]
  votesDeprecated    VoteDeprecated[]
  streams            Stream[]
}

model MessageDeprecated {
  id        String   @id @default(uuid())
  chatId    String
  role      String
  content   Json
  createdAt DateTime

  chat  Chat             @relation(fields: [chatId], references: [id])
  votes VoteDeprecated[]
}

model Message {
  id          String   @id @default(uuid())
  chatId      String
  role        String
  parts       Json
  attachments Json
  createdAt   DateTime

  chat  Chat   @relation(fields: [chatId], references: [id])
  votes Vote[]
}

model VoteDeprecated {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat              @relation(fields: [chatId], references: [id])
  message MessageDeprecated @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean

  chat    Chat    @relation(fields: [chatId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([chatId, messageId])
}

model Document {
  id        String       @default(uuid())
  createdAt DateTime
  title     String
  content   String?
  kind      DocumentKind @default(text)
  userId    String

  user        User         @relation(fields: [userId], references: [id])
  suggestions Suggestion[]

  @@id([id, createdAt])
}

model Suggestion {
  id                String   @id @default(uuid())
  documentId        String
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String
  createdAt         DateTime

  document Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt])
  user     User     @relation(fields: [userId], references: [id])
}

model Stream {
  id        String   @id @default(uuid())
  chatId    String
  createdAt DateTime

  chat Chat @relation(fields: [chatId], references: [id])
}
